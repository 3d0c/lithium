
#### Special syntax

Views have a special syntax for outputting escaped text. The standard way to
output escaped text in your views from Lithium is as follows: {{{
<?=$variable;?>
}}}

This is where a lot of confusion comes in, because it is commonly misunderstood
that Lithium depends on `short_open_tags`, however, that's not the case. The
contents of a view are processed through a [ tokenizer](template/view/Compier) before
it is included by PHP. The file is then `compiled` into the final PHP+HTML (or whatever
other content type that is requsted), which is then passed off to be fully rendered
by the two-step view to its final form.

See the PHP [ manual](http://php.net/manual/en/book.tokenizer.php) to learn more about tokens.

The stream wrapper reads the file and searches for anything that looks like
`<?=...?>` and replaces it with `<?php echo $h(...); ?>`.

The design decision behind using PHP's short echo syntax is because it's a
familiar syntax and it helps developers focus more on what data _should not_ be
escaped vs. what data _needs_ to be escaped.

One special case situation to take _important_ note of, is the use of
`<?=$this->foo()?>`. In this scenario, the code is translated to
`<?php echo $this->foo(); ?>` rather than being filtered through `$h()` as with
the former explanation. When direct access to a method or property on `$this` is
contained in the shorthands syntax, it will be output as normal without being
filtered. This is to make it easier to work with helpers that return markup.

An example would be something like: {{{
<?=$this->form->create();?>
... my form here ...
<?=$this->form->end();?>
}}}

**Note:** `$h()` is the HTML escape function used in views.

**Note:** To output regular, unescaped text, use plain old `<?php echo ...; ?>`.

**Other useful information:**

 - [Introduction to PHP streams](http://www.php.net/intro.stream)
 - [Stream examples](http://www.php.net/stream.examples)

#### Using helpers

Helpers are lazy-loaded by the current renderer. To use a helper, you can
reference it by its name like this: {{{
echo $this->html->link('Google', 'http://www.google.com');
}}}

In a template, `$this` refers to the `Renderer` object. By using `$this->html`
for the first time, the renderer will create an instance of the helper and store
it so that the next time the helper is invoked the renderer will not have to
re-instanciate the helper.

Using such an approach, helpers can easily be loaded as needed without any
performance impact.

**More info**

 - [ Html helper](template/helper/Html)
 - [ Form helper](template/helper/Form)
 - [ Helper base class](template/Helper)

#### Rendering Elements

Elements are reusable view snippets that you can use in several views and layouts.
You can reference it like so: 
{{{
echo $this->view()->render(
	array('element' => 'menu'), 
	array('var1' => $var1, 'var2' => $var2)
);
}}} 

Where `menu` is the name of your element file, in this example `app/views/elements/menu.html.php`
and `var1` and `var2` are variables either declared in the view or set in the controller (as
per the normal way of passing variables to views with `return` or `$this->set`) that you want the
element to be able to access. For short syntax you can use `compact('var1','var2')`.

**More info**

 - [ View](template/View)
 - [ Renderer](template/view/Renderer)
 - [ File adapter](template/view/adapter/File)